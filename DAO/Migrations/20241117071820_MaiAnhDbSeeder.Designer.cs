// <auto-generated />
using System;
using DAO.Model.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAO.Migrations
{
    [DbContext(typeof(HomieContext))]
    [Migration("20241117071820_MaiAnhDbSeeder")]
    partial class MaiAnhDbSeeder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAO.Model.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("AppliedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeJobPost")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8702),
                            JobId = 1,
                            Message = "Tôi rất thích công việc này và muốn ứng tuyển.",
                            Status = "pending",
                            TypeJobPost = 1,
                            WorkerId = 3
                        },
                        new
                        {
                            Id = 2,
                            AppliedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8704),
                            JobId = 2,
                            Message = "Tôi có kinh nghiệm trong lĩnh vực giặt ủi.",
                            Status = "accepted",
                            TypeJobPost = 1,
                            WorkerId = 4
                        },
                        new
                        {
                            Id = 3,
                            AppliedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8705),
                            JobId = 3,
                            Message = "Tôi có nhiều kinh nghiệm chăm sóc thú cưng.",
                            Status = "rejected",
                            TypeJobPost = 1,
                            WorkerId = 5
                        },
                        new
                        {
                            Id = 4,
                            AppliedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8706),
                            JobId = 4,
                            Message = "Tôi sẵn sàng làm việc ngay.",
                            Status = "pending",
                            TypeJobPost = 1,
                            WorkerId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppliedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8707),
                            JobId = 5,
                            Message = "Tôi rất muốn tham gia vào dự án này.",
                            Status = "pending",
                            TypeJobPost = 1,
                            WorkerId = 3
                        });
                });

            modelBuilder.Entity("DAO.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Combo 1: Lau nhà, quét nhà",
                            Price = 80000m
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Combo 2: Giặt đồ, ủi đồ",
                            Price = 80000m
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Combo 3: Lau nhà, quét nhà, dọn bếp",
                            Price = 100000m
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Combo 4: Chăm sóc thú cưng (ăn uống, vệ sinh, tắm rửa)",
                            Price = 100000m
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Combo 5: Tổng hợp (full option trên)",
                            Price = 200000m
                        });
                });

            modelBuilder.Entity("DAO.Model.CategoryJobPost", b =>
                {
                    b.Property<int>("JobPostId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("JobPostId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryJobPosts");

                    b.HasData(
                        new
                        {
                            JobPostId = 1,
                            CategoryId = 1,
                            Id = 1
                        },
                        new
                        {
                            JobPostId = 2,
                            CategoryId = 2,
                            Id = 2
                        },
                        new
                        {
                            JobPostId = 3,
                            CategoryId = 3,
                            Id = 3
                        },
                        new
                        {
                            JobPostId = 4,
                            CategoryId = 4,
                            Id = 4
                        },
                        new
                        {
                            JobPostId = 5,
                            CategoryId = 5,
                            Id = 5
                        });
                });

            modelBuilder.Entity("DAO.Model.EWallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EWallets");

                    b.HasData(
                        new
                        {
                            WalletId = 1,
                            Balance = 1000000.00m,
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8653),
                            UpdatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8654),
                            UserId = 1
                        },
                        new
                        {
                            WalletId = 2,
                            Balance = 500000.00m,
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8681),
                            UpdatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8681),
                            UserId = 2
                        },
                        new
                        {
                            WalletId = 3,
                            Balance = 750000.00m,
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8683),
                            UpdatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8683),
                            UserId = 3
                        },
                        new
                        {
                            WalletId = 4,
                            Balance = 250000.00m,
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8684),
                            UpdatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8685),
                            UserId = 4
                        },
                        new
                        {
                            WalletId = 5,
                            Balance = 300000.00m,
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8686),
                            UpdatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8686),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("DAO.Model.JobPost", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobId"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SquareMeters")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobId");

                    b.HasIndex("EmployerId");

                    b.ToTable("JobPosts");

                    b.HasData(
                        new
                        {
                            JobId = 1,
                            CreateDate = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8616),
                            Description = "Cần tìm nhân viên lau dọn văn phòng 2 lần mỗi tuần.",
                            EmployerId = 1,
                            EndDate = new DateTime(2025, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobType = 1,
                            Location = "Hồ Chí Minh",
                            NumberOfFloors = 1,
                            Price = 200000m,
                            SquareMeters = 100.5m,
                            StartDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open",
                            Title = "Lau dọn văn phòng"
                        },
                        new
                        {
                            JobId = 2,
                            CreateDate = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8619),
                            Description = "Tìm nhân viên giặt ủi đồ cho gia đình 2 lần mỗi tháng.",
                            EmployerId = 2,
                            EndDate = new DateTime(2025, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobType = 1,
                            Location = "Hồ Chí Minh",
                            NumberOfFloors = 1,
                            Price = 80000m,
                            SquareMeters = 150.0m,
                            StartDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open",
                            Title = "Giặt ủi đồ gia đình"
                        },
                        new
                        {
                            JobId = 3,
                            CreateDate = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8621),
                            Description = "Cần tìm người chăm sóc chó mèo trong thời gian đi công tác.",
                            EmployerId = 3,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobType = 1,
                            Location = "Hồ Chí Minh",
                            Price = 150000m,
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open",
                            Title = "Chăm sóc thú cưng"
                        },
                        new
                        {
                            JobId = 4,
                            CreateDate = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8623),
                            Description = "Cần tìm nhân viên dọn dẹp nhà cửa trước Tết.",
                            EmployerId = 4,
                            EndDate = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobType = 1,
                            Location = "Hồ Chí Minh",
                            NumberOfFloors = 2,
                            Price = 300000m,
                            SquareMeters = 200.0m,
                            StartDate = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open",
                            Title = "Dọn dẹp nhà cửa"
                        },
                        new
                        {
                            JobId = 5,
                            CreateDate = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8625),
                            Description = "Cần nhân viên tổng hợp dịch vụ dọn dẹp và giặt ủi cho một căn hộ lớn.",
                            EmployerId = 5,
                            EndDate = new DateTime(2025, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JobType = 1,
                            Location = "Hồ Chí Minh",
                            NumberOfFloors = 3,
                            Price = 500000m,
                            SquareMeters = 300.0m,
                            StartDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Open",
                            Title = "Tổng hợp dịch vụ dọn dẹp"
                        });
                });

            modelBuilder.Entity("DAO.Model.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            Content = "Chào John, bạn có thể giúp tôi một việc không?",
                            ReceiverId = 2,
                            SenderId = 1,
                            SentAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8731)
                        },
                        new
                        {
                            MessageId = 2,
                            Content = "Chào Admin, tôi sẵn sàng giúp đỡ!",
                            ReceiverId = 1,
                            SenderId = 2,
                            SentAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8732)
                        },
                        new
                        {
                            MessageId = 3,
                            Content = "Alice, bạn có biết cách làm việc này không?",
                            ReceiverId = 4,
                            SenderId = 3,
                            SentAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8733)
                        },
                        new
                        {
                            MessageId = 4,
                            Content = "Vâng, tôi có thể giúp bạn với điều đó.",
                            ReceiverId = 3,
                            SenderId = 4,
                            SentAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8734)
                        },
                        new
                        {
                            MessageId = 5,
                            Content = "Admin, tôi cần thông tin về dự án mới.",
                            ReceiverId = 1,
                            SenderId = 5,
                            SentAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8734)
                        });
                });

            modelBuilder.Entity("DAO.Model.Profiles", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"), 1L, 1);

                    b.Property<string>("Availability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RatingAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Profiles");

                    b.HasData(
                        new
                        {
                            ProfileId = 1,
                            Availability = "Sẵn sàng làm việc theo giờ linh hoạt.",
                            Bio = "Kỹ năng giúp việc tận tâm, có khả năng nấu ăn và dọn dẹp tốt.",
                            Experience = "5 năm kinh nghiệm trong việc làm giúp việc tại gia đình và văn phòng.",
                            RatingAvg = 4.5m,
                            Skills = "Nấu ăn, Giặt giũ, Lau nhà, Dọn dẹp, Chăm sóc thú cưng",
                            UserId = 2
                        },
                        new
                        {
                            ProfileId = 2,
                            Availability = "Có thể làm việc vào cuối tuần.",
                            Bio = "Người giúp việc chuyên nghiệp với kỹ năng nấu ăn đa dạng.",
                            Experience = "4 năm kinh nghiệm phục vụ tại các gia đình và khách sạn.",
                            RatingAvg = 4.7m,
                            Skills = "Nấu ăn, Lau nhà, Dọn dẹp, Giặt giũ, Quản lý thời gian",
                            UserId = 3
                        },
                        new
                        {
                            ProfileId = 3,
                            Availability = "Sẵn sàng làm việc toàn thời gian.",
                            Bio = "Chuyên gia giúp việc tận tâm với sự chú ý đến chi tiết.",
                            Experience = "6 năm kinh nghiệm giúp việc cho nhiều gia đình, bao gồm việc chăm sóc thú cưng.",
                            RatingAvg = 4.6m,
                            Skills = "Giặt giũ, Lau nhà, Dọn dẹp, Nấu ăn, Chăm sóc thú cưng",
                            UserId = 4
                        },
                        new
                        {
                            ProfileId = 4,
                            Availability = "Có thể làm việc theo hợp đồng.",
                            Bio = "Người giúp việc chu đáo, có khả năng làm nhiều việc cùng lúc.",
                            Experience = "3 năm làm việc tại nhiều gia đình với mức độ hài lòng cao từ khách hàng.",
                            RatingAvg = 4.2m,
                            Skills = "Dọn dẹp, Giặt giũ, Nấu ăn, Chăm sóc nhà cửa, Quản lý chi tiêu",
                            UserId = 5
                        },
                        new
                        {
                            ProfileId = 5,
                            Availability = "Sẵn sàng làm việc theo yêu cầu của khách hàng.",
                            Bio = "Chuyên viên dịch vụ giúp việc với kỹ năng giao tiếp tốt.",
                            Experience = "7 năm kinh nghiệm trong lĩnh vực giúp việc tại nhà.",
                            RatingAvg = 4.8m,
                            Skills = "Nấu ăn, Lau nhà, Giặt giũ, Dọn dẹp, Chăm sóc người cao tuổi",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("DAO.Model.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReviewedId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("JobId");

                    b.HasIndex("ReviewedId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Công việc này rất tốt, tôi rất hài lòng!",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8715),
                            JobId = 1,
                            Rating = 4.5m,
                            ReviewedId = 3,
                            ReviewerId = 2
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Alice làm việc rất chuyên nghiệp!",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8717),
                            JobId = 2,
                            Rating = 5.0m,
                            ReviewedId = 4,
                            ReviewerId = 3
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Bob cần cải thiện một số kỹ năng.",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8718),
                            JobId = 3,
                            Rating = 3.0m,
                            ReviewedId = 5,
                            ReviewerId = 4
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "John đã làm tốt công việc!",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8719),
                            JobId = 4,
                            Rating = 4.0m,
                            ReviewedId = 2,
                            ReviewerId = 5
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Alice rất chăm chỉ và tận tâm!",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8719),
                            JobId = 5,
                            Rating = 4.8m,
                            ReviewedId = 4,
                            ReviewerId = 1
                        });
                });

            modelBuilder.Entity("DAO.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Customer"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Employee"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Manager"
                        });
                });

            modelBuilder.Entity("DAO.Model.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("TransactionHistories");
                });

            modelBuilder.Entity("DAO.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AvatarUrl = "https://example.com/avatar1.jpg",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8575),
                            DateOfBirth = new DateTime(1985, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@example.com",
                            Gender = "Male",
                            Name = "Admin User",
                            Password = "admin123",
                            Phone = "1234567890",
                            RoleId = 1,
                            Status = true
                        },
                        new
                        {
                            UserId = 2,
                            AvatarUrl = "https://example.com/avatar2.jpg",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8578),
                            DateOfBirth = new DateTime(1990, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Gender = "Male",
                            Name = "John Doe",
                            Password = "password123",
                            Phone = "0987654321",
                            RoleId = 2,
                            Status = true
                        },
                        new
                        {
                            UserId = 3,
                            AvatarUrl = "https://example.com/avatar3.jpg",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8580),
                            DateOfBirth = new DateTime(1992, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            Gender = "Female",
                            Name = "Jane Smith",
                            Password = "password456",
                            Phone = "1122334455",
                            RoleId = 3,
                            Status = true
                        },
                        new
                        {
                            UserId = 4,
                            AvatarUrl = "https://example.com/avatar4.jpg",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8581),
                            DateOfBirth = new DateTime(1988, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.brown@example.com",
                            Gender = "Female",
                            Name = "Alice Brown",
                            Password = "password789",
                            Phone = "9988776655",
                            RoleId = 4,
                            Status = false
                        },
                        new
                        {
                            UserId = 5,
                            AvatarUrl = "https://example.com/avatar5.jpg",
                            CreatedAt = new DateTime(2024, 11, 17, 7, 18, 20, 174, DateTimeKind.Utc).AddTicks(8582),
                            DateOfBirth = new DateTime(1987, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.johnson@example.com",
                            Gender = "Male",
                            Name = "Bob Johnson",
                            Password = "password101",
                            Phone = "1231231234",
                            RoleId = 5,
                            Status = true
                        });
                });

            modelBuilder.Entity("DAO.Model.Application", b =>
                {
                    b.HasOne("DAO.Model.JobPost", "JobPost")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAO.Model.User", "Worker")
                        .WithMany("Applications")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DAO.Model.CategoryJobPost", b =>
                {
                    b.HasOne("DAO.Model.Category", "Category")
                        .WithMany("CategoryJobPost")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAO.Model.JobPost", "JobPost")
                        .WithMany("CategoryJobPosts")
                        .HasForeignKey("JobPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("JobPost");
                });

            modelBuilder.Entity("DAO.Model.EWallet", b =>
                {
                    b.HasOne("DAO.Model.User", "User")
                        .WithOne("EWallet")
                        .HasForeignKey("DAO.Model.EWallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAO.Model.JobPost", b =>
                {
                    b.HasOne("DAO.Model.User", "Employer")
                        .WithMany("JobPosts")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("DAO.Model.Message", b =>
                {
                    b.HasOne("DAO.Model.User", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAO.Model.User", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DAO.Model.Profiles", b =>
                {
                    b.HasOne("DAO.Model.User", "User")
                        .WithOne("Profiles")
                        .HasForeignKey("DAO.Model.Profiles", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAO.Model.Review", b =>
                {
                    b.HasOne("DAO.Model.JobPost", "JobPost")
                        .WithMany("Reviews")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAO.Model.User", "Reviewed")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("ReviewedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAO.Model.User", "Reviewer")
                        .WithMany("ReviewsWritten")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPost");

                    b.Navigation("Reviewed");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("DAO.Model.TransactionHistory", b =>
                {
                    b.HasOne("DAO.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAO.Model.EWallet", "EWallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EWallet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAO.Model.User", b =>
                {
                    b.HasOne("DAO.Model.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DAO.Model.Category", b =>
                {
                    b.Navigation("CategoryJobPost");
                });

            modelBuilder.Entity("DAO.Model.JobPost", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("CategoryJobPosts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DAO.Model.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DAO.Model.User", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("EWallet")
                        .IsRequired();

                    b.Navigation("JobPosts");

                    b.Navigation("MessagesReceived");

                    b.Navigation("MessagesSent");

                    b.Navigation("Profiles")
                        .IsRequired();

                    b.Navigation("ReviewsReceived");

                    b.Navigation("ReviewsWritten");
                });
#pragma warning restore 612, 618
        }
    }
}
